import React from 'react';
import { Loader, Percent, XCircle } from 'lucide-react';
import { AiEstimate } from '../../../types';
import InfoTooltip from '../../common/InfoTooltip';

interface AiEstimateDisplayProps {
    aiEstimate: { loading: boolean; data: AiEstimate | null; error: string | null; };
}

const AiEstimateDisplay: React.FC<AiEstimateDisplayProps> = ({ aiEstimate }) => {
    const { loading, data, error } = aiEstimate;
    const aiTooltip = "This is an experimental estimate generated by AI. It analyzes the same benefit data as the algorithm but may interpret complex COB rules differently. Use it as a supplementary reference.";

    return (
         <div className="bg-white p-6 rounded-xl shadow-lg border border-gray-200/80">
             <h3 className="text-xl font-semibold text-gray-800 mb-4 flex items-center space-x-2">
                <Percent className="text-purple-600"/><span>AI-Generated Estimate</span>
                <span className="text-xs font-bold bg-purple-100 text-purple-700 px-2 py-0.5 rounded-full">BETA</span>
                <InfoTooltip text={aiTooltip} />
             </h3>
            {loading && ( <div className="flex flex-col items-center justify-center h-24"><Loader className="h-6 w-6 animate-spin text-purple-600" /><p className="text-sm text-gray-500 mt-2">Generating AI estimate...</p></div> )}
            {error && ( <div className="flex flex-col items-center justify-center h-24"><XCircle className="h-6 w-6 text-red-500" /><p className="text-sm text-red-500 mt-2 text-center">Failed to generate AI estimate: <br/> {error}</p></div> )}
            {data && (
                <div className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="bg-purple-50 border border-purple-200 p-4 rounded-lg text-center">
                            <p className="text-sm font-medium text-purple-800">AI Est. Patient Responsibility</p>
                            <p className="text-3xl font-bold text-purple-700 mt-1">${(data.finalPatientResponsibility || 0).toFixed(2)}</p>
                             <p className="text-xs text-gray-500 mt-1">AI Confidence: {data.overallConfidence || 'N/A'}</p>
                        </div>
                        <div className="bg-gray-50 border border-gray-200 p-4 rounded-lg">
                             <h4 className="font-semibold text-gray-700 mb-2">AI Payer Breakdown</h4>
                             <ul className="space-y-1 text-sm">
                                {data.primaryPayer && (<li className="flex justify-between"><span>{data.primaryPayer.payerName} (Pri):</span><span className="font-medium text-green-700">${(data.primaryPayer.estimatedPayment || 0).toFixed(2)}</span></li>)}
                                {data.secondaryPayer && (<li className="flex justify-between"><span>{data.secondaryPayer.payerName} (Sec):</span><span className="font-medium text-green-700">${(data.secondaryPayer.estimatedPayment || 0).toFixed(2)}</span></li>)}
                                {data.tertiaryPayer && (<li className="flex justify-between"><span>{data.tertiaryPayer.payerName} (Ter):</span><span className="font-medium text-green-700">${(data.tertiaryPayer.estimatedPayment || 0).toFixed(2)}</span></li>)}
                             </ul>
                        </div>
                    </div>
                    <div className="text-xs text-gray-600 space-y-2">
                        {data.primaryPayer?.notes && <p><strong>Primary:</strong> {data.primaryPayer.notes}</p>}
                        {data.secondaryPayer?.notes && <p><strong>Secondary:</strong> {data.secondaryPayer.notes}</p>}
                        {data.tertiaryPayer?.notes && <p><strong>Tertiary:</strong> {data.tertiaryPayer.notes}</p>}
                        {data.keyAssumptions?.length > 0 && <p><strong>Assumptions:</strong> {data.keyAssumptions.join(' ')}</p>}
                    </div>
                </div>
            )}
         </div>
    );
};

export default AiEstimateDisplay;
